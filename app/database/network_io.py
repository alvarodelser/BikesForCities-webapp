from datetime import datetime
import psycopg2
from typing import List, Optional, Tuple



# Connect to the database
def connect_db():
    import os
    return psycopg2.connect(
        dbname=os.getenv("POSTGRES_DB"),
        user=os.getenv("POSTGRES_USER"),
        password=os.getenv("POSTGRES_PASSWORD"),
        host=os.getenv("POSTGRES_HOST"),
        port=os.getenv("POSTGRES_PORT", "5432")
    )

# Insert (or retrieve) a network and return its ID
def get_or_create_network(conn, name: str, description: Optional[str] = None, 
                          center_lat: Optional[float] = None, center_lon: Optional[float] = None, 
                          radius: Optional[float] = None) -> int:
    with conn.cursor() as cur:
        cur.execute("""
            INSERT INTO networks (name, description, center_lat, center_lon, radius)
            VALUES (%s, %s, %s, %s, %s)
            ON CONFLICT (name) DO UPDATE SET 
                description = EXCLUDED.description,
                center_lat = EXCLUDED.center_lat,
                center_lon = EXCLUDED.center_lon,
                radius = EXCLUDED.radius
            RETURNING id
        """, (name, description, center_lat, center_lon, radius))
        return cur.fetchone()[0]

def put_nodes(conn, nodes: List[Tuple[int, int, int, float, float, str, int]]):
    """Bulk‐insert node rows.

    Expected tuple layout:
        (network_id, id, osmid, lat, lon, geom_wkt, street_count)
    """
    with conn.cursor() as cur:
        cur.executemany(
            """
            INSERT INTO nodes (
                network_id, id, osmid, lat, lon, geom, street_count
            )
            VALUES (
                %s, %s, %s, %s, %s, ST_GeomFromText(%s, 4326), %s
            )
            ON CONFLICT (id) DO NOTHING
            """,
            nodes,
        )
    conn.commit()


def put_edges(conn, edges: List[Tuple]):
    """Bulk‐insert edge rows.

    Each tuple should follow the layout generated by
    `app.processing.network_ops.extract_edges`:

        (network_id, osmid, u, v, k, geom, highway, name, length, width,
         maxspeed, lanes, oneway, tunnel, bridge)
    """
    with conn.cursor() as cur:
        cur.executemany(
            """
            INSERT INTO edges (
                network_id, osmid, u, v, k, geom, highway, name, length, width,
                maxspeed, lanes, oneway, tunnel, bridge
            )
            VALUES (
                %s, %s, %s, %s, %s, ST_GeomFromText(%s, 4326),
                %s, %s, %s, %s, %s, %s, %s, %s, %s
            )
            ON CONFLICT (u, v, k) DO NOTHING
            """,
            [
                (
                    e[0],  # network_id
                    e[1],  # osmid
                    e[2],  # u
                    e[3],  # v
                    e[4],  # k
                    e[5].wkt,  # geom as WKT
                    *e[6:],
                )
                for e in edges
            ],
        )
    conn.commit()


def put_routes(conn, routes: List[Tuple[int, str, int, int, str, float, datetime, int]]):
    """Bulk insert routes.

    Tuple layout must follow the column order in schema.sql:

        (network_id, id_trip, origin_node, dest_node, strategy, trip_minutes,
         datetime_unlock, id_bike)
    """

    with conn.cursor() as cur:
        cur.executemany(
            """
            INSERT INTO routes (
                network_id, id_trip, origin_node, dest_node, strategy,
                trip_minutes, datetime_unlock, id_bike
            )
            VALUES (%s, %s, %s, %s, %s, %s, %s, %s)
            ON CONFLICT (id_trip) DO NOTHING
            """,
            routes,
        )
    conn.commit()

def get_nodes(conn: psycopg2.extensions.connection, network_id: int) -> List[Tuple[int, float, float, str, int]]:
    """
    Retrieve all nodes belonging to the given network ID.
    
    :param conn: PostgreSQL database connection
    :param network_id: ID of the network to filter nodes by
    :return: List of tuples (id, lat, lon, geom_wkt, street_count)
    """
    with conn.cursor() as cur:
        cur.execute("""
            SELECT id, lat, lon, ST_AsText(geom), street_count
            FROM nodes
            WHERE network_id = %s
        """, (network_id,))
        return cur.fetchall()


def get_edges(conn: psycopg2.extensions.connection, network_id: int) -> List[Tuple]:
    """
    Retrieve all edges belonging to the given network ID.
    
    :param conn: PostgreSQL database connection
    :param network_id: ID of the network to filter edges by
    :return: List of edge attribute tuples
    """
    with conn.cursor() as cur:
        cur.execute("""
            SELECT 
                osmid, u, v, k, ST_AsText(geom),
                highway, name, length, width,
                maxspeed, lanes, oneway, tunnel, bridge
            FROM edges
            WHERE network_id = %s
        """, (network_id,))
        return cur.fetchall()


def get_all_networks(conn: psycopg2.extensions.connection) -> List[Tuple[int, str, Optional[str]]]:
    """
    Retrieve all networks from the database.
    
    :param conn: PostgreSQL database connection
    :return: List of tuples (id, name, description)
    """
    with conn.cursor() as cur:
        cur.execute("SELECT id, name, description FROM networks ORDER BY name")
        return cur.fetchall()


def get_network_center(conn: psycopg2.extensions.connection, network_id: int) -> Optional[Tuple[float, float, float]]:
    """
    Get the center point and radius for a network.
    
    :param conn: PostgreSQL database connection
    :param network_id: ID of the network
    :return: Tuple of (center_lat, center_lon, radius) or None if not set
    """
    with conn.cursor() as cur:
        cur.execute("""
            SELECT center_lat, center_lon, radius 
            FROM networks 
            WHERE id = %s
        """, (network_id,))
        result = cur.fetchone()
        if result and all(x is not None for x in result):
            return result
        return None


def count_nodes(conn: psycopg2.extensions.connection, network_id: int) -> int:
    """
    Count the number of nodes for a given network ID.
    
    :param conn: PostgreSQL database connection
    :param network_id: ID of the network to count nodes for
    :return: Number of nodes
    """
    with conn.cursor() as cur:
        cur.execute("SELECT COUNT(*) FROM nodes WHERE network_id = %s", (network_id,))
        return cur.fetchone()[0]


def count_edges(conn: psycopg2.extensions.connection, network_id: int) -> int:
    """
    Count the number of edges for a given network ID.
    
    :param conn: PostgreSQL database connection
    :param network_id: ID of the network to count edges for
    :return: Number of edges
    """
    with conn.cursor() as cur:
        cur.execute("SELECT COUNT(*) FROM edges WHERE network_id = %s", (network_id,))
        return cur.fetchone()[0]


def count_routes(conn: psycopg2.extensions.connection, network_id: int) -> int:
    """
    Count the number of routes/trips for a given network ID.
    
    :param conn: PostgreSQL database connection
    :param network_id: ID of the network to count routes for
    :return: Number of routes
    """
    with conn.cursor() as cur:
        cur.execute("SELECT COUNT(*) FROM routes WHERE network_id = %s", (network_id,))
        return cur.fetchone()[0]


def put_features(conn, network_id: int, features_data: List[Tuple]):
    """
    Bulk insert features (same pattern as put_nodes/put_edges).
    
    Expected tuple layout:
        (feature_type, geometry_wkt, tags_json)
    
    :param conn: PostgreSQL database connection
    :param network_id: ID of the network to insert features for
    :param features_data: List of feature tuples
    """
    with conn.cursor() as cur:
        cur.executemany(
            """
            INSERT INTO features (
                network_id, feature_type, geometry, tags
            )
            VALUES (
                %s, %s, ST_GeomFromText(%s, 4326), %s
            )
            ON CONFLICT DO NOTHING
            """,
            [(network_id, feature_type, geom_wkt, tags_json) 
             for feature_type, geom_wkt, tags_json in features_data]
        )
    conn.commit()


def get_features(conn: psycopg2.extensions.connection, network_id: int, feature_type: Optional[str] = None) -> List[Tuple]:
    """
    Get features by network and optionally filter by type.
    
    :param conn: PostgreSQL database connection
    :param network_id: ID of the network to filter features by
    :param feature_type: Optional feature type to filter by
    :return: List of feature tuples (id, feature_type, geometry_wkt, tags)
    """
    with conn.cursor() as cur:
        if feature_type:
            cur.execute("""
                SELECT id, feature_type, ST_AsText(geometry), tags
                FROM features
                WHERE network_id = %s AND feature_type = %s
            """, (network_id, feature_type))
        else:
            cur.execute("""
                SELECT id, feature_type, ST_AsText(geometry), tags
                FROM features
                WHERE network_id = %s
            """, (network_id,))
        return cur.fetchall()


def count_features(conn: psycopg2.extensions.connection, network_id: int, feature_type: Optional[str] = None) -> int:
    """
    Count the number of features for a given network ID and optionally by type.
    
    :param conn: PostgreSQL database connection
    :param network_id: ID of the network to count features for
    :param feature_type: Optional feature type to filter by
    :return: Number of features
    """
    with conn.cursor() as cur:
        if feature_type:
            cur.execute("SELECT COUNT(*) FROM features WHERE network_id = %s AND feature_type = %s", (network_id, feature_type))
        else:
            cur.execute("SELECT COUNT(*) FROM features WHERE network_id = %s", (network_id,))
        return cur.fetchone()[0]